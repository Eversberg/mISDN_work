Index: standalone/drivers/isdn/mISDN/socket.c
===================================================================
--- standalone.orig/drivers/isdn/mISDN/socket.c
+++ standalone/drivers/isdn/mISDN/socket.c
@@ -602,14 +602,14 @@ static const struct proto_ops data_sock_
 };
 
 static int
-data_sock_create(struct net *net, struct socket *sock, int protocol)
+data_sock_create(struct socket *sock, int protocol)
 {
 	struct sock *sk;
 
 	if (sock->type != SOCK_DGRAM)
 		return -ESOCKTNOSUPPORT;
 
-	sk = sk_alloc(net, PF_ISDN, GFP_KERNEL, &mISDN_proto);
+	sk = sk_alloc(PF_ISDN, GFP_KERNEL, &mISDN_proto, 1);
 	if (!sk)
 		return -ENOMEM;
 
@@ -756,14 +756,14 @@ static const struct proto_ops base_sock_
 
 
 static int
-base_sock_create(struct net *net, struct socket *sock, int protocol)
+base_sock_create(struct socket *sock, int protocol)
 {
 	struct sock *sk;
 
 	if (sock->type != SOCK_RAW)
 		return -ESOCKTNOSUPPORT;
 
-	sk = sk_alloc(net, PF_ISDN, GFP_KERNEL, &mISDN_proto);
+	sk = sk_alloc(PF_ISDN, GFP_KERNEL, &mISDN_proto, 1);
 	if (!sk)
 		return -ENOMEM;
 
@@ -779,13 +779,13 @@ base_sock_create(struct net *net, struct
 }
 
 static int
-mISDN_sock_create(struct net *net, struct socket *sock, int proto)
+mISDN_sock_create(struct socket *sock, int proto)
 {
 	int err = -EPROTONOSUPPORT;
 
 	switch (proto) {
 	case ISDN_P_BASE:
-		err = base_sock_create(net, sock, proto);
+		err = base_sock_create(sock, proto);
 		break;
 	case ISDN_P_TE_S0:
 	case ISDN_P_NT_S0:
@@ -799,7 +799,7 @@ mISDN_sock_create(struct net *net, struc
 	case ISDN_P_B_L2DTMF:
 	case ISDN_P_B_L2DSP:
 	case ISDN_P_B_L2DSPHDLC:
-		err = data_sock_create(net, sock, proto);
+		err = data_sock_create(sock, proto);
 		break;
 	default:
 		return err;
Index: standalone/include/linux/mISDNif_s.h
===================================================================
--- standalone.orig/include/linux/mISDNif_s.h
+++ standalone/include/linux/mISDNif_s.h
@@ -589,6 +589,9 @@ extern void	set_channel_address(struct m
 extern void	mISDN_clock_update(struct mISDNclock *, int, struct timeval *);
 extern unsigned short mISDN_clock_get(void);
 
+#define pr_notice(fmt, arg...)	printk(KERN_NOTICE fmt, ##arg)
+#define pr_err(fmt, arg...)	printk(KERN_ERR fmt, ##arg)
+#define pr_warning(fmt, arg...)	printk(KERN_WARNING fmt, ##arg)
 #define pr_warn		pr_warning
 #endif /* __KERNEL__ */
 #endif /* mISDNIF_H */
